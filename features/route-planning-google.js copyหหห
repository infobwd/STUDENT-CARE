// features/route-planning-google.js
// ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° Google Maps Integration

const RoutePlanningGoogle = {
    isInitialized: false,
    optimizedRoute: [],
    tempSelections: [], // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
    init() {
        if (this.isInitialized) return;
        console.log('üöó Initializing Route Planning with Google Maps...');
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
        if (typeof map === 'undefined' || typeof homeVisitData === 'undefined') {
            setTimeout(() => this.init(), 1000);
            return;
        }
        
        this.createRouteButton();
        this.isInitialized = true;
        console.log('‚úÖ Route Planning with Google Maps loaded successfully');
    },
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    createRouteButton() {
    const controlBar = document.querySelector('.btn-group');
    if (!controlBar) return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingBtn = document.getElementById('routePlanningGoogleBtn');
    if (existingBtn) {
        existingBtn.remove(); // ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
    }
    
    const routeBtn = document.createElement('button');
    routeBtn.id = 'routePlanningGoogleBtn';
    routeBtn.className = 'btn btn-outline-success btn-sm';
    routeBtn.innerHTML = '<i class="fab fa-google"></i> Google ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á';
    routeBtn.onclick = () => this.showRoutePlanningModal();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
    const centerBtn = document.getElementById('centerMapBtn');
    if (centerBtn) {
        // ‡πÅ‡∏ó‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á centerBtn
        centerBtn.parentNode.insertBefore(routeBtn, centerBtn.nextSibling);
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ centerBtn ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≤‡∏¢
        controlBar.appendChild(routeBtn);
    }
    
    console.log('‚úÖ Route button created successfully');
},
    
  clearSelection() {
    console.log('üóëÔ∏è Clearing all selections...');
    
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allCheckboxes = document.querySelectorAll('.google-student-checkbox');
    allCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï dropdown ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const routeTypeEl = document.getElementById('googleRouteType');
    if (routeTypeEl) {
        routeTypeEl.value = 'custom'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô custom ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï summary
    this.updateRouteSummary();
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    this.showToast('‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß', 'info');
    
    console.log('‚úÖ All selections cleared');
},
debugSelections() {
    console.log('üîç Debug Selections:');
    console.log('- fromPreviewBack:', this.fromPreviewBack);
    console.log('- tempSelections:', this.tempSelections);
    console.log('- checked boxes:', document.querySelectorAll('.google-student-checkbox:checked').length);
    
    const checkedIndices = Array.from(document.querySelectorAll('.google-student-checkbox:checked'))
        .map(cb => parseInt(cb.value));
    console.log('- checked indices:', checkedIndices);
},
    // ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
showRoutePlanningModal() {
    console.log('üì± Opening route planning modal');
    console.log('- fromPreviewBack:', this.fromPreviewBack);
    console.log('- tempSelections:', this.tempSelections);
    
    this.removeExistingModal();
    this.createRoutePlanningModal();
    this.populateStudentList(); // ‡∏à‡∏∞ restore selections ‡πÉ‡∏ô renderStudentList

    const modal = new bootstrap.Modal(document.getElementById('routePlanningGoogleModal'));
    modal.show();
},
    
    // ‡∏•‡∏ö Modal ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    removeExistingModal() {
        const existingModal = document.getElementById('routePlanningGoogleModal');
        if (existingModal) {
            existingModal.remove();
        }
    },
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Modal
   createRoutePlanningModal() {
    const modalHTML = `
        <div class="modal fade" id="routePlanningGoogleModal" tabindex="-1" aria-labelledby="routePlanningGoogleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="routePlanningGoogleModalLabel">
                            <i class="fab fa-google"></i> ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Google Maps
                        </h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ -->
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡πÄ‡∏õ‡∏¥‡∏î Google Maps" 
                            ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Google Maps ‡∏û‡∏£‡πâ‡∏≠‡∏° turn-by-turn navigation
                        </div>

                        <!-- Real-time Summary Bar -->
                        <div id="googleRouteSummary" class="alert alert-light border" style="display: none;">
                            <div class="row text-center">
                                <div class="col-3">
                                    <div class="d-flex align-items-center justify-content-center">
                                        <i class="fas fa-home text-primary me-2"></i>
                                        <div>
                                            <div class="h4 text-primary mb-0" id="selectedCount">0</div>
                                            <small class="text-muted">‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-3">
                                    <div class="d-flex align-items-center justify-content-center">
                                        <i class="fas fa-route text-success me-2"></i>
                                        <div>
                                            <div class="h4 text-success mb-0" id="estimatedDistance">0</div>
                                            <small class="text-muted">‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-3">
                                    <div class="d-flex align-items-center justify-content-center">
                                        <i class="fas fa-clock text-info me-2"></i>
                                        <div>
                                            <div class="h4 text-info mb-0" id="estimatedTime">0</div>
                                            <small class="text-muted">‡∏ô‡∏≤‡∏ó‡∏µ</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-3">
                                    <div class="d-flex align-items-center justify-content-center">
                                        <i class="fas fa-car text-warning me-2"></i>
                                        <div>
                                            <div class="h5 text-warning mb-0" id="travelModeDisplay">üöó</div>
                                            <small class="text-muted">‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="progress mt-2" style="height: 8px;">
                                <div class="progress-bar bg-success" role="progressbar" id="selectionProgress" style="width: 0%"></div>
                            </div>
                            <div class="text-center mt-2">
                                <small class="text-muted" id="summaryStatus">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á</small>
                            </div>
                        </div>

                        <div class="row">
                            <!-- ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° -->
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0"><i class="fas fa-cogs"></i> ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</h6>
                                    </div>
                                    <div class="card-body">
                                        <!-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° -->
                                        <div class="mb-3">
                                            <label class="form-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°:</label>
                                            <select id="googleRouteType" class="form-select form-select-sm">
                                                <option value="notVisited">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)</option>
                                                <option value="priority">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á</option>
                                                <option value="nearSchool">‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
                                                <option value="all">‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏™</option>
                                                <option value="custom">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á</option>
                                            </select>
                                        </div>
                                        
                                        <!-- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î -->
                                        <div class="mb-3">
                                            <label class="form-label">‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</label>
                                            <select id="googleMaxVisits" class="form-select form-select-sm">
                                                <option value="5">5 ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô</option>
                                                <option value="10" selected>10 ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô</option>
                                                <option value="15">15 ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô</option>
                                                <option value="20">20 ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô</option>
                                                <option value="25">25 ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô</option>
                                            </select>
                                            <small class="text-muted">Google Maps ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 25 ‡∏à‡∏∏‡∏î</small>
                                        </div>
                                        
                                        <!-- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á -->
                                        <div class="mb-3">
                                            <label class="form-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</label>
                                            <select id="googleTravelMode" class="form-select form-select-sm">
                                                <option value="driving">üöó ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ</option>
                                                <option value="walking">üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏ó‡πâ‡∏≤</option>
                                                <option value="bicycling">üö¥ ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô</option>
                                                <option value="transit">üöå ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞</option>
                                            </select>
                                        </div>
                                        
                                        <!-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° -->
                                        <div class="mb-3">
                                            <label class="form-label">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°:</label>
                                            <select id="googleSortBy" class="form-select form-select-sm">
                                                <option value="distance">‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î</option>
                                                <option value="priority">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</option>
                                                <option value="class">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
                                                <option value="name">‡∏ä‡∏∑‡πà‡∏≠ A-Z</option>
                                            </select>
                                        </div>
                                        
                                        <!-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° -->
                                        <div class="d-grid gap-2">
                                            <button type="button" class="btn btn-primary btn-sm" onclick="RoutePlanningGoogle.generateGoogleRoute()" id="generateRouteBtn" disabled>
                                                <i class="fab fa-google"></i> ‡πÄ‡∏õ‡∏¥‡∏î Google Maps
                                            </button>
                                            <button type="button" class="btn btn-outline-info btn-sm" onclick="RoutePlanningGoogle.previewRoute()" id="previewRouteBtn" disabled>
                                                <i class="fas fa-eye"></i> ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="RoutePlanningGoogle.clearSelection()">
                                                <i class="fas fa-trash"></i> ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Quick Actions -->
                                <div class="card mt-3">
                                    <div class="card-header">
                                        <h6 class="mb-0"><i class="fas fa-bolt"></i> ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏î‡πà‡∏ß‡∏ô</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-grid gap-2">
                                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="RoutePlanningGoogle.quickRoute('urgent')">
                                                <i class="fas fa-exclamation-triangle"></i> ‡πÄ‡∏Ñ‡∏™‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô (5 ‡∏Ñ‡∏ô)
                                            </button>
                                            <button type="button" class="btn btn-outline-warning btn-sm" onclick="RoutePlanningGoogle.quickRoute('nearby')">
                                                <i class="fas fa-map-marker-alt"></i> ‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (10 ‡∏Ñ‡∏ô)
                                            </button>
                                            <button type="button" class="btn btn-outline-success btn-sm" onclick="RoutePlanningGoogle.quickRoute('notVisited')">
                                                <i class="fas fa-list-check"></i> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° (15 ‡∏Ñ‡∏ô)
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô -->
                            <div class="col-md-8">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0"><i class="fas fa-list"></i> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h6>
                                        <div class="d-flex align-items-center">
                                            <span class="badge bg-primary me-2" id="totalStudentCount">0</span>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="RoutePlanningGoogle.selectAll()">
                                                    <i class="fas fa-check-square"></i> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="RoutePlanningGoogle.unselectAll()">
                                                    <i class="fas fa-square"></i> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ -->
                                    <div class="card-body pb-2">
                                        <div class="input-group input-group-sm mb-3">
                                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                                            <input type="text" id="googleStudentSearch" class="form-control" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô, ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô...">
                                            <button class="btn btn-outline-secondary" type="button" onclick="RoutePlanningGoogle.clearSearch()">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body pt-0" style="max-height: 500px; overflow-y: auto;">
                                        <div id="googleStudentListContainer">
                                            <div class="text-center">
                                                <div class="spinner-border spinner-border-sm" role="status"></div>
                                                <small class="ms-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="d-flex justify-content-between w-100">
                            <div>
                                <small class="text-muted">
                                    <i class="fas fa-info-circle"></i> 
                                    Google Maps ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                                </small>
                            </div>
                            <div>
                                <button type="button" class="btn btn-outline-info" onclick="RoutePlanningGoogle.shareRoute()" id="shareRouteBtn" disabled>
                                    <i class="fas fa-share"></i> ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
                                </button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                    <i class="fas fa-times"></i> ‡∏õ‡∏¥‡∏î
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners ‡∏û‡∏£‡πâ‡∏≠‡∏° real-time updates
    this.setupModalEventListeners();
},
    
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Real-time Updates
setupModalEventListeners() {
    // Route Type Change
    const routeTypeEl = document.getElementById('googleRouteType');
    if (routeTypeEl) {
        routeTypeEl.addEventListener('change', () => {
            this.onRouteTypeChanged();
            this.updateRouteSummary();
        });
    }
    
    // Max Visits Change
    const maxVisitsEl = document.getElementById('googleMaxVisits');
    if (maxVisitsEl) {
        maxVisitsEl.addEventListener('change', () => {
            this.updateRouteSummary();
            this.validateSelection();
        });
    }
    
    // Travel Mode Change
    const travelModeEl = document.getElementById('googleTravelMode');
    if (travelModeEl) {
        travelModeEl.addEventListener('change', () => {
            this.updateTravelModeDisplay();
            this.updateRouteSummary();
        });
    }
    
    // Sort By Change
    const sortByEl = document.getElementById('googleSortBy');
    if (sortByEl) {
        sortByEl.addEventListener('change', () => {
            this.sortStudentList();
        });
    }
    
    // Search Input
    const searchEl = document.getElementById('googleStudentSearch');
    if (searchEl) {
        searchEl.addEventListener('input', (e) => {
            this.searchStudents(e.target.value);
        });
        
        // Clear search on escape
        searchEl.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.clearSearch();
            }
        });
    }
    
    // Show summary on modal open
    const modal = document.getElementById('routePlanningGoogleModal');
    if (modal) {
        modal.addEventListener('shown.bs.modal', () => {
            document.getElementById('googleRouteSummary').style.display = 'block';
            this.updateRouteSummary();
        });
    }
},

  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
updateTravelModeDisplay() {
    const travelModeEl = document.getElementById('googleTravelMode');
    const displayEl = document.getElementById('travelModeDisplay');
    
    if (!travelModeEl || !displayEl) return;
    
    const modes = {
        'driving': 'üöó',
        'walking': 'üö∂',
        'bicycling': 'üö¥',
        'transit': 'üöå'
    };
    
    displayEl.textContent = modes[travelModeEl.value] || 'üöó';
},
  
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
validateSelection() {
    const selectedCount = this.getSelectedStudentsCount();
    const maxVisits = parseInt(document.getElementById('googleMaxVisits')?.value) || 25;
    
    // Enable/Disable buttons based on selection
    const generateBtn = document.getElementById('generateRouteBtn');
    const previewBtn = document.getElementById('previewRouteBtn');
    const shareBtn = document.getElementById('shareRouteBtn');
    
    const isValidSelection = selectedCount > 0 && selectedCount <= maxVisits;
    
    if (generateBtn) generateBtn.disabled = !isValidSelection;
    if (previewBtn) previewBtn.disabled = !isValidSelection;
    if (shareBtn) shareBtn.disabled = !isValidSelection;
    
    return isValidSelection;
},  
  
// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
getSelectedStudentsCount() {
    const visibleCheckedBoxes = Array.from(document.querySelectorAll('.google-student-checkbox:checked')).filter(checkbox => {
        const parentItem = checkbox.closest('.google-student-item');
        return parentItem && 
               parentItem.style.display !== 'none' && 
               parentItem.offsetParent !== null;
    });
    return visibleCheckedBoxes.length;
},  
  
  
restoreSelectionsWhenReady(expectedIndices = []) {
    const container = document.getElementById('googleStudentListContainer');
    if (!container || this.isRestoring) return;

    this.isRestoring = true; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥

    const observer = new MutationObserver((mutations, obs) => {
        const allReady = expectedIndices.every(index => {
            return document.getElementById(`google_student_${index}`);
        });

        if (allReady) {
            obs.disconnect();
            expectedIndices.forEach(index => {
                const checkbox = document.getElementById(`google_student_${index}`);
                if (checkbox) checkbox.checked = true;
            });

            this.updateRouteSummary();

            // ‚úÖ Reset flag
            this.isRestoring = false;
        }
    });

    observer.observe(container, {
        childList: true,
        subtree: true
    });
}

, 

    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
populateStudentList() {
    const container = document.getElementById('googleStudentListContainer');
    const totalCountEl = document.getElementById('totalStudentCount');

    if (!container) return;

    if (!homeVisitData || homeVisitData.length === 0) {
        container.innerHTML = '<div class="text-muted text-center">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</div>';
        if (totalCountEl) totalCountEl.textContent = '0';
        return;
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î
    const studentsWithCoords = homeVisitData
        .map((student, index) => ({ ...student, originalIndex: index }))
        .filter(student => student['LatLongHome']?.includes(','));

    if (studentsWithCoords.length === 0) {
        container.innerHTML = '<div class="text-muted text-center">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</div>';
        if (totalCountEl) totalCountEl.textContent = '0';
        return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (totalCountEl) {
        totalCountEl.textContent = studentsWithCoords.length;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    this.renderStudentList(studentsWithCoords);
},
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
     searchStudents(searchTerm) {
        const items = document.querySelectorAll('.google-student-item');
        const term = searchTerm.toLowerCase().trim();
        
        let visibleCount = 0;
        
        items.forEach(item => {
            const index = parseInt(item.dataset.index);
            if (isNaN(index) || !homeVisitData[index]) {
                item.style.display = 'none';
                return;
            }
            
            const student = homeVisitData[index];
            const name = (student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '').toLowerCase();
            const nickname = (student['‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô'] || '').toLowerCase();
            const classroom = (student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || '').toLowerCase();
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠, ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô, ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            const isMatch = term === '' || 
                           name.includes(term) || 
                           nickname.includes(term) || 
                           classroom.includes(term);
            
            item.style.display = isMatch ? 'block' : 'none';
            if (isMatch) visibleCount++;
        });
        
        console.log(`üîç Search results: ${visibleCount} items visible for term: "${term}"`);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        setTimeout(() => this.updateRouteSummary(), 100);
    },
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    clearSearch() {
        const searchInput = document.getElementById('googleStudentSearch');
        if (searchInput) {
            searchInput.value = '';
            this.searchStudents(''); // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        }
    },
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 renderStudentList(students) {
    const container = document.getElementById('googleStudentListContainer');
    
    // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï summary ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ç‡∏ì‡∏∞ render
    this.isRendering = true;
    
    const studentListHTML = students.map((student) => {
        const originalIndex = student.originalIndex;
        const isVisited = student['‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] === '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß';
        const distance = student.distanceFromSchool ? 
            `${student.distanceFromSchool.toFixed(1)} ‡∏Å‡∏°.` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
        
        const statusBadge = isVisited ? 
            '<span class="badge bg-success">‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß</span>' : 
            '<span class="badge bg-danger">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</span>';
        
        const priorityScore = this.calculatePriorityScore(student);
        const priorityBadge = priorityScore >= 6 ? 
            '<span class="badge bg-warning">‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</span>' : '';
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á restore selection ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const shouldBeChecked = this.shouldStudentBeChecked(originalIndex, isVisited);
        
        return `
            <div class="form-check border rounded p-2 mb-2 google-student-item" data-index="${originalIndex}" data-priority="${priorityScore}">
                <input class="form-check-input google-student-checkbox" type="checkbox" value="${originalIndex}" id="google_student_${originalIndex}" ${shouldBeChecked ? 'checked' : ''}>
                
                <label class="form-check-label w-100" for="google_student_${originalIndex}">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>${student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</strong>
                            <small class="text-muted d-block">${student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || ''} ‚Ä¢ ${distance}</small>
                        </div>
                        <div class="text-end">
                            ${statusBadge}
                            ${priorityBadge}
                        </div>
                    </div>
                </label>
            </div>
        `;
    }).join('');
    
    container.innerHTML = studentListHTML;
    
    // ‚úÖ Bind events ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    this.bindCheckboxEvents();
    
    // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï summary ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
    this.isRendering = false;
    
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á render ‡πÄ‡∏™‡∏£‡πá‡∏à
    setTimeout(() => {
        this.sortStudentList();
        this.updateRouteSummary();
        
        // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á restore flags ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        if (this.fromPreviewBack) {
            console.log(`‚úÖ Successfully restored ${this.tempSelections?.length || 0} selections after preview`);
            this.fromPreviewBack = false;
            this.tempSelections = null; // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        }
    }, 150);
},
  
  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
shouldStudentBeChecked(originalIndex, isVisited) {
    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å preview ‡πÅ‡∏•‡∏∞‡∏°‡∏µ tempSelections
    if (this.fromPreviewBack && this.tempSelections && this.tempSelections.length > 0) {
        return this.tempSelections.includes(originalIndex);
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£ restore ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°)
    return !isVisited;
},
  
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bind events
    bindCheckboxEvents() {
        // ‡∏•‡∏ö event listeners ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        document.querySelectorAll('.google-student-checkbox').forEach(checkbox => {
            checkbox.removeEventListener('change', this.handleCheckboxChange);
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡πÉ‡∏´‡∏°‡πà
        document.querySelectorAll('.google-student-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));
        });
    },
  
   // Handle checkbox change event
handleCheckboxChange(event) {
    if (this.isRendering) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á render
    
    // Debounce ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    clearTimeout(this.summaryUpdateTimeout);
    this.summaryUpdateTimeout = setTimeout(() => {
        this.updateRouteSummary();
    }, 50);
},

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    calculatePriorityScore(student) {
        let priority = 0;
        
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
        if (student['‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] !== '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß') priority += 3;
        
        // ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≥
        const income = student['‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'] ? parseFloat(student['‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'].replace(/[‡∏ø,]/g, '')) : 0;
        if (income > 0 && income < 5000) priority += 3;
        else if (income >= 5000 && income < 10000) priority += 2;
        else if (income >= 10000 && income < 15000) priority += 1;
        
        // ‡πÑ‡∏î‡πâ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£
        if (student['‡πÑ‡∏î‡πâ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏£‡∏±‡∏ê'] === 'TRUE') priority += 1;
        
        // ‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏∞‡∏û‡∏∂‡πà‡∏á‡∏û‡∏¥‡∏á
        if (student['‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏∞‡∏û‡∏∂‡πà‡∏á‡∏û‡∏¥‡∏á']) priority += 1;
        
        // ‡πÑ‡∏Å‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        if (student.distanceFromSchool && student.distanceFromSchool > 5) priority += 2;
        else if (student.distanceFromSchool && student.distanceFromSchool > 3) priority += 1;
        
        return priority;
    },
    
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
 onRouteTypeChanged() {
    const routeTypeEl = document.getElementById('googleRouteType');
    if (!routeTypeEl) return;

    const routeType = routeTypeEl.value;
    console.log('üîÑ Route type changed to:', routeType);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á restore ‡∏à‡∏≤‡∏Å preview ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏° auto-select
    if (this.fromPreviewBack && this.tempSelections && this.tempSelections.length > 0) {
        console.log('‚è≥ ‡∏Ç‡πâ‡∏≤‡∏° auto-select ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á restore ‡∏à‡∏≤‡∏Å preview');
        return;
    }

    const checkboxes = document.querySelectorAll('.google-student-checkbox');

    checkboxes.forEach((checkbox, index) => {
        const studentIndex = parseInt(checkbox.value);
        if (isNaN(studentIndex) || !homeVisitData[studentIndex]) return;

        const student = homeVisitData[studentIndex];
        let shouldCheck = false;

        switch (routeType) {
            case 'all':
                shouldCheck = true;
                break;
            case 'notVisited':
                shouldCheck = student['‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] !== '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß';
                break;
            case 'priority':
                shouldCheck = this.calculatePriorityScore(student) >= 4;
                break;
            case 'nearSchool':
                shouldCheck = student.distanceFromSchool && student.distanceFromSchool < 3;
                break;
            case 'custom':
                return; // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
        }

        checkbox.checked = shouldCheck;
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    setTimeout(() => this.updateRouteSummary(), 100);
},
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    sortStudentList() {
        const sortByEl = document.getElementById('googleSortBy');
        const container = document.getElementById('googleStudentListContainer');
        
        if (!sortByEl || !container) return;
        
        const sortBy = sortByEl.value;
        const items = Array.from(container.querySelectorAll('.google-student-item'));
        
        items.sort((a, b) => {
            const indexA = parseInt(a.dataset.index);
            const indexB = parseInt(b.dataset.index);
            
            if (isNaN(indexA) || isNaN(indexB) || !homeVisitData[indexA] || !homeVisitData[indexB]) {
                return 0;
            }
            
            const studentA = homeVisitData[indexA];
            const studentB = homeVisitData[indexB];
            
            switch (sortBy) {
                case 'distance':
                    return (studentA.distanceFromSchool || 999) - (studentB.distanceFromSchool || 999);
                case 'priority':
                    return parseInt(b.dataset.priority || 0) - parseInt(a.dataset.priority || 0);
                case 'class':
                    return (studentA['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || '').localeCompare(studentB['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || '');
                case 'name':
                    return (studentA['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '').localeCompare(studentB['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '');
                default:
                    return 0;
            }
        });
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô DOM
        items.forEach(item => container.appendChild(item));
    },
    
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á - Enhanced Version
updateRouteSummary() {
    const selectedCountEl = document.getElementById('selectedCount');
    const estimatedDistanceEl = document.getElementById('estimatedDistance');
    const estimatedTimeEl = document.getElementById('estimatedTime');
    const summaryDiv = document.getElementById('googleRouteSummary');
    const progressBar = document.getElementById('selectionProgress');
    const statusEl = document.getElementById('summaryStatus');
    const maxVisitsEl = document.getElementById('googleMaxVisits');
     const checked = document.querySelectorAll('.google-student-checkbox:checked');
    console.log(`üîÅ Summary: ${checked.length} students selected`);
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ modal ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    const modal = document.getElementById('routePlanningGoogleModal');
    if (!modal || !modal.classList.contains('show')) return;
    
    if (!selectedCountEl || !estimatedDistanceEl || !estimatedTimeEl || !summaryDiv) return;
    
    try {
        const selectedCount = this.getSelectedStudentsCount();
        const maxVisits = parseInt(maxVisitsEl?.value) || 25;
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        let totalDistance = 0;
        let validStudents = 0;
        
        if (selectedCount > 0) {
            const checkedBoxes = Array.from(document.querySelectorAll('.google-student-checkbox:checked')).filter(checkbox => {
                const parentItem = checkbox.closest('.google-student-item');
                return parentItem && 
                       parentItem.style.display !== 'none' && 
                       parentItem.offsetParent !== null;
            });
            
            checkedBoxes.forEach(checkbox => {
                const index = parseInt(checkbox.value);
                if (!isNaN(index) && homeVisitData && homeVisitData[index]) {
                    const student = homeVisitData[index];
                    totalDistance += parseFloat(student.distanceFromSchool) || 0;
                    validStudents++;
                }
            });
        }
        
        const estimatedTime = (validStudents * 30) + (totalDistance * 3);
        const progressPercent = Math.min((selectedCount / maxVisits) * 100, 100);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        selectedCountEl.textContent = selectedCount.toString();
        estimatedDistanceEl.textContent = totalDistance.toFixed(1);
        estimatedTimeEl.textContent = Math.round(estimatedTime).toString();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress bar
        if (progressBar) {
            progressBar.style.width = progressPercent + '%';
            
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            progressBar.className = 'progress-bar';
            if (selectedCount > maxVisits) {
                progressBar.classList.add('bg-danger');
            } else if (selectedCount > maxVisits * 0.8) {
                progressBar.classList.add('bg-warning');
            } else {
                progressBar.classList.add('bg-success');
            }
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (statusEl) {
            if (selectedCount === 0) {
                statusEl.textContent = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á';
                statusEl.className = 'text-muted';
            } else if (selectedCount > maxVisits) {
                statusEl.textContent = `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î! (${selectedCount}/${maxVisits})`;
                statusEl.className = 'text-danger';
            } else {
                statusEl.textContent = `‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (${selectedCount}/${maxVisits})`;
                statusEl.className = 'text-success';
            }
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ summary
        if (selectedCount > maxVisits) {
            summaryDiv.className = 'alert alert-warning border';
        } else if (selectedCount > 0) {
            summaryDiv.className = 'alert alert-light border border-success';
        } else {
            summaryDiv.className = 'alert alert-light border';
        }
        
        // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
        this.validateSelection();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï travel mode display
        this.updateTravelModeDisplay();
        
        console.log(`‚úÖ Summary updated: ${selectedCount} students, ${totalDistance.toFixed(1)}km, ${Math.round(estimatedTime)}min`);
        
    } catch (error) {
        console.error('‚ùå Error updating route summary:', error);
    }
},
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
selectAll() {
        const maxVisitsEl = document.getElementById('googleMaxVisits');
        if (!maxVisitsEl) return;
        
        const maxVisits = parseInt(maxVisitsEl.value) || 25;
        const visibleCheckboxes = Array.from(document.querySelectorAll('.google-student-checkbox')).filter(checkbox => {
            const parentItem = checkbox.closest('.google-student-item');
            return parentItem && 
                   parentItem.style.display !== 'none' && 
                   parentItem.offsetParent !== null;
        });
        
        let count = 0;
        visibleCheckboxes.forEach(checkbox => {
            if (count < maxVisits) {
                checkbox.checked = true;
                count++;
            } else {
                checkbox.checked = false;
            }
        });
        
        console.log(`‚úÖ Selected ${count} students out of ${maxVisits} max`);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ
        setTimeout(() => this.updateRouteSummary(), 100);
    },
    
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
unselectAll() {
        const visibleCheckboxes = Array.from(document.querySelectorAll('.google-student-checkbox')).filter(checkbox => {
            const parentItem = checkbox.closest('.google-student-item');
            return parentItem && 
                   parentItem.style.display !== 'none' && 
                   parentItem.offsetParent !== null;
        });
        
        visibleCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        
        console.log('üóëÔ∏è Unselected all visible students');
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ
        setTimeout(() => this.updateRouteSummary(), 100);
    },
    
    // ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏î‡πà‡∏ß‡∏ô
    quickRoute(type) {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        this.unselectAll();
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ checkbox ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà
        const visibleCheckboxes = Array.from(document.querySelectorAll('.google-student-checkbox')).filter(checkbox => {
            const parentItem = checkbox.closest('.google-student-item');
            return parentItem && parentItem.style.display !== 'none';
        });
        
        let limits = { urgent: 5, nearby: 10, notVisited: 15 };
        let count = 0;
        
        visibleCheckboxes.forEach(checkbox => {
            if (count >= limits[type]) return;
            
            const studentIndex = parseInt(checkbox.value);
            if (isNaN(studentIndex) || !homeVisitData[studentIndex]) return;
            
            const student = homeVisitData[studentIndex];
            let shouldSelect = false;
            
            switch (type) {
                case 'urgent':
                    shouldSelect = this.calculatePriorityScore(student) >= 6;
                    break;
                case 'nearby':
                    shouldSelect = student.distanceFromSchool && student.distanceFromSchool < 3;
                    break;
                case 'notVisited':
                    shouldSelect = student['‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] !== '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß';
                    break;
            }
            
            if (shouldSelect) {
                checkbox.checked = true;
                count++;
            }
        });
        
        this.updateRouteSummary();
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        const messages = {
            urgent: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏™‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô ${count} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
            nearby: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${count} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
            notVisited: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ${count} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`
        };
        
        this.showToast(messages[type], 'success');
    },
 ///////////////////////////////////////   
// Enhanced previewRoute - Simple & Clean Design ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π
previewRoute() {
    const selectedCheckboxes = document.querySelectorAll('.google-student-checkbox:checked');
    
    if (selectedCheckboxes.length === 0) {
        Swal.fire({ icon: 'warning', title: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' });
        return;
    }

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö original indices ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const selectedIndices = Array.from(selectedCheckboxes).map(cb => parseInt(cb.value));
    console.log('üíæ Saving selections for restore:', selectedIndices);
    
    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô tempSelections
    this.tempSelections = selectedIndices;
    this.fromPreviewBack = false; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á student objects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview
    const selectedStudents = selectedIndices.map(index => ({
        ...homeVisitData[index],
        originalIndex: index
    }));

    this.closeCurrentModalAndShowPreview(selectedStudents);
},
  
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á preview
closeCurrentModalAndShowPreview(selectedStudents) {
    const currentModal = bootstrap.Modal.getInstance(document.getElementById('routePlanningGoogleModal'));

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ (‡πÉ‡∏ä‡πâ originalIndex)
    this.tempSelections = selectedStudents.map(s => s.originalIndex);

    if (currentModal) {
        currentModal.hide();

        const modalElement = document.getElementById('routePlanningGoogleModal');
        modalElement.addEventListener('hidden.bs.modal', () => {
            setTimeout(() => {
                this.showRoutePreviewModal(selectedStudents);
            }, 200);
        }, { once: true });
    } else {
        this.showRoutePreviewModal(selectedStudents);
    }
}
,

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Route Preview Modal
showRoutePreviewModal(selectedStudents) {
    console.log('üìã Creating route preview modal');
    
    // ‡∏•‡∏ö modal preview ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    this.removeExistingPreviewModal();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    const routeData = this.calculateRouteData(selectedStudents);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview modal
    this.createRoutePreviewModal(selectedStudents, routeData);
    
    // ‡πÅ‡∏™‡∏î‡∏á modal
    const previewModal = new bootstrap.Modal(document.getElementById('routePreviewModal'));
    previewModal.show();
    
    console.log('‚úÖ Route preview modal displayed');
},

// ‡∏•‡∏ö Preview Modal ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
removeExistingPreviewModal() {
    const existingModal = document.getElementById('routePreviewModal');
    if (existingModal) {
        // ‡∏õ‡∏¥‡∏î modal ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        const modalInstance = bootstrap.Modal.getInstance(existingModal);
        if (modalInstance) {
            modalInstance.hide();
        }
        existingModal.remove();
    }
},

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
calculateRouteData(students) {
    const travelMode = document.getElementById('googleTravelMode')?.value || 'driving';
    const sortBy = document.getElementById('googleSortBy')?.value || 'distance';
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    const sortedStudents = this.sortSelectedStudents(students);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°
    const totalDistance = sortedStudents.reduce((sum, student) => {
        return sum + (student.distanceFromSchool || 0);
    }, 0);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤
    const estimatedTime = this.calculateAccurateTime(sortedStudents, travelMode);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Google Maps URL
    const googleMapsUrl = this.generateGoogleMapsUrl(sortedStudents);
    
    return {
        students: sortedStudents,
        totalDistance: totalDistance,
        estimatedTime: estimatedTime,
        travelMode: travelMode,
        googleMapsUrl: googleMapsUrl,
        startTime: new Date()
    };
},

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
calculateAccurateTime(students, travelMode) {
    const baseVisitTime = 30; // ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô
    const setupTime = 5; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô
    
    const speedMap = {
        driving: 35,    // ‡∏Å‡∏°./‡∏ä‡∏°. (‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á + ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
        walking: 4,     // ‡∏Å‡∏°./‡∏ä‡∏°.
        bicycling: 15,  // ‡∏Å‡∏°./‡∏ä‡∏°.
        transit: 25     // ‡∏Å‡∏°./‡∏ä‡∏°.
    };
    
    let totalMinutes = 0;
    
    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏£‡∏Å
    if (students.length > 0) {
        const firstStudent = students[0];
        const distanceToFirst = firstStudent.distanceFromSchool || 0;
        totalMinutes += (distanceToFirst / speedMap[travelMode]) * 60;
    }
    
    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô
    students.forEach((student, index) => {
        totalMinutes += baseVisitTime; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
        
        if (index < students.length - 1) {
            // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            const nextStudent = students[index + 1];
            const distance = this.calculateDistanceBetweenStudents(student, nextStudent);
            totalMinutes += (distance / speedMap[travelMode]) * 60 + setupTime;
        }
    });
    
    // ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    if (students.length > 0) {
        const lastStudent = students[students.length - 1];
        const distanceBack = lastStudent.distanceFromSchool || 0;
        totalMinutes += (distanceBack / speedMap[travelMode]) * 60;
    }
    
    return {
        hours: Math.floor(totalMinutes / 60),
        minutes: Math.round(totalMinutes % 60),
        totalMinutes: Math.round(totalMinutes)
    };
},

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
calculateDistanceBetweenStudents(student1, student2) {
    if (!student1['LatLongHome'] || !student2['LatLongHome']) return 0;
    
    const [lat1, lng1] = student1['LatLongHome'].split(',').map(coord => parseFloat(coord.trim()));
    const [lat2, lng2] = student2['LatLongHome'].split(',').map(coord => parseFloat(coord.trim()));
    
    if (isNaN(lat1) || isNaN(lng1) || isNaN(lat2) || isNaN(lng2)) return 0;
    
    const R = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLng/2) * Math.sin(dLng/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
},

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Route Preview Modal
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Route Preview Modal ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢
// ‡∏™‡∏£‡πâ‡∏≤‡∏á Route Preview Modal - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Interactive
createRoutePreviewModal(students, routeData) {
    const modalHTML = `
        <div class="modal fade" id="routePreviewModal" tabindex="-1" aria-labelledby="routePreviewModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable modal-xl">
                <div class="modal-content rounded-4 border-0 shadow">
                    <div class="modal-header bg-white border-bottom-0">
                        <h5 class="modal-title fw-semibold text-dark" id="routePreviewModalLabel">
                            üó∫Ô∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body bg-light">
                        <!-- ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á -->
                        <section class="mb-4">
                            <div class="row text-center g-3">
                                ${this.renderStatCard('üë®‚Äçüë©‚Äçüëß‚Äçüë¶', '‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô', students.length)}
                                ${this.renderStatCard('üìè', '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°', `${routeData.totalDistance.toFixed(1)} ‡∏Å‡∏°.`)}
                                ${this.renderStatCard('‚è±Ô∏è', '‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', `${routeData.estimatedTime.hours} ‡∏ä‡∏°. ${routeData.estimatedTime.minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`)}
                                ${this.renderStatCard('üöô', '‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', this.getTravelModeText())}
                            </div>
                        </section>

                        <!-- ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á - ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà -->
                        <section class="mb-4">
                            <h6 class="fw-bold mb-2">üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á</h6>
                            <div class="bg-white p-3 rounded shadow-sm">
                                <!-- ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° -->
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div class="d-flex align-items-center">
                                        <small class="text-muted me-3">
                                            <span class="badge bg-danger me-1">üè´</span> ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                                            <span class="badge bg-primary me-1">üìç</span> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°  
                                            <span class="badge bg-success me-1">‚úÖ</span> ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß
                                        </small>
                                    </div>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" onclick="RoutePlanningGoogle.centerMap()" title="‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á">
                                            <i class="fas fa-compress-arrows-alt"></i> ‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á
                                        </button>
                                        <button class="btn btn-outline-info" onclick="RoutePlanningGoogle.toggleMapView()" title="‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠">
                                            <i class="fas fa-expand"></i> ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
                                        </button>
                                        <button class="btn btn-outline-success" onclick="RoutePlanningGoogle.openGoogleMapsFromPreview()" title="‡πÄ‡∏õ‡∏¥‡∏î Google Maps">
                                            <i class="fab fa-google"></i> Google Maps
                                        </button>
                                    </div>
                                </div>
                                
                                <!-- ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Interactive -->
                                ${this.generateInteractiveMapHTML()}
                            </div>
                            <p class="text-muted text-center mt-2 small">
                                <i class="fas fa-mouse-pointer"></i> 
                                ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‚Ä¢ ‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‚Ä¢ ‡∏•‡πâ‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏π‡∏°
                            </p>
                        </section>

                        <!-- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á -->
                        <section class="row g-4">
                            <div class="col-md-6">
                                <h6 class="mb-2 fw-bold">üîÑ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</h6>
                                <div class="bg-white p-3 rounded shadow-sm" style="max-height: 400px; overflow-y: auto;">
                                    ${this.generateRouteTimelineHTML(students, routeData)}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6 class="mb-2 fw-bold">üë©‚Äçüè´ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h6>
                                <div class="bg-white p-3 rounded shadow-sm" style="max-height: 400px; overflow-y: auto;">
                                    ${this.generateStudentDetailsHTML(students)}
                                </div>
                            </div>
                        </section>

                        <!-- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° -->
                        <section class="mt-4">
                            <div class="row g-3">
                                <!-- ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° -->
                                <div class="col-md-6">
                                    <div class="bg-white p-3 rounded shadow-sm">
                                        <h6 class="fw-bold mb-2">üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</h6>
                                        ${this.generateVisitStats(students)}
                                    </div>
                                </div>
                                <!-- ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏™‡∏±‡∏á‡πÄ‡∏Ç‡∏õ -->
                                <div class="col-md-6">
                                    <div class="bg-white p-3 rounded shadow-sm">
                                        <h6 class="fw-bold mb-2">üöó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á</h6>
                                        ${this.generateRouteInfo(routeData)}
                                    </div>
                                </div>
                            </div>
                        </section>
                    </div>
                    <div class="modal-footer bg-white border-top-0">
                        <div class="d-flex justify-content-between w-100">
                            <button class="btn btn-outline-dark" onclick="RoutePlanningGoogle.backToRoutePlanning()">
                                <i class="fas fa-arrow-left"></i> ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            </button>
                            <div>
                                <button class="btn btn-success me-2" onclick="RoutePlanningGoogle.generateGoogleRouteFromPreview()">
                                    <i class="fab fa-google"></i> ‡πÄ‡∏õ‡∏¥‡∏î Google Maps
                                </button>
                                <button class="btn btn-info me-2" onclick="RoutePlanningGoogle.printRoutePreview()">
                                    <i class="fas fa-print"></i> ‡∏û‡∏¥‡∏°‡∏û‡πå
                                </button>
                                <button class="btn btn-outline-secondary me-2" onclick="RoutePlanningGoogle.shareRoutePreview()">
                                    <i class="fas fa-share"></i> ‡πÅ‡∏ä‡∏£‡πå
                                </button>
                                <button class="btn btn-light border" data-bs-dismiss="modal">
                                    <i class="fas fa-times"></i> ‡∏õ‡∏¥‡∏î
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    this.currentPreviewData = { students, routeData };
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
    this.setupPreviewModalEvents();
},

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
generateVisitStats(students) {
    const visited = students.filter(s => s['‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] === '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß').length;
    const notVisited = students.length - visited;
    const avgDistance = students.reduce((sum, s) => sum + (s.distanceFromSchool || 0), 0) / students.length;
    const priorityHigh = students.filter(s => this.calculatePriorityScore(s) >= 6).length;
    
    return `
        <div class="row text-center">
            <div class="col-6 border-end">
                <div class="h4 text-success mb-0">${visited}</div>
                <small class="text-muted">‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß</small>
            </div>
            <div class="col-6">
                <div class="h4 text-danger mb-0">${notVisited}</div>
                <small class="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</small>
            </div>
        </div>
        <hr class="my-2">
        <div class="row text-center">
            <div class="col-6 border-end">
                <div class="h5 text-info mb-0">${avgDistance.toFixed(1)}</div>
                <small class="text-muted">‡∏Å‡∏°.‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</small>
            </div>
            <div class="col-6">
                <div class="h5 text-warning mb-0">${priorityHigh}</div>
                <small class="text-muted">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á</small>
            </div>
        </div>
    `;
},

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
generateRouteInfo(routeData) {
    const startTime = new Date();
    startTime.setHours(15, 0, 0, 0);
    const endTime = new Date(startTime.getTime() + routeData.estimatedTime.totalMinutes * 60000);
    
    return `
        <div class="mb-2">
            <small class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥):</small>
            <div class="fw-bold">${startTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })} ‡∏ô.</div>
        </div>
        <div class="mb-2">
            <small class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì):</small>
            <div class="fw-bold">${endTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })} ‡∏ô.</div>
        </div>
        <div class="mb-2">
            <small class="text-muted">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</small>
            <div class="fw-bold">${this.getTravelModeText()}</div>
        </div>
        <div>
            <small class="text-muted">‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö:</small>
            <div class="fw-bold">${this.getSortByText()}</div>
        </div>
    `;
},

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Preview Modal
setupPreviewModalEvents() {
    // ‡∏ü‡∏±‡∏á ESC key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î full-screen map
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            const mapContainer = document.getElementById('interactiveMapContainer');
            if (mapContainer && mapContainer.style.position === 'fixed') {
                this.toggleMapView();
            }
        }
    });
    
    // ‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ modal ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    const modal = document.getElementById('routePreviewModal');
    if (modal) {
        modal.addEventListener('shown.bs.modal', () => {
            console.log('üì± Preview modal opened, initializing map...');
            
            // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM render ‡πÄ‡∏™‡∏£‡πá‡∏à
            setTimeout(() => {
                this.initializeMap();
            }, 300);
        });
        
        modal.addEventListener('hidden.bs.modal', () => {
            this.cleanupPreviewModal();
        });
    }
},


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Preview
shareRoutePreview() {
    if (!this.currentPreviewData) {
        this.showToast('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå', 'warning');
        return;
    }
    
    const students = this.currentPreviewData.students;
    const routeData = this.currentPreviewData.routeData;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏£‡πå
    const shareText = `üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleDateString('th-TH')}
üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${students.length} ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô
üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${routeData.totalDistance.toFixed(1)} ‡∏Å‡∏°.
‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: ${routeData.estimatedTime.hours} ‡∏ä‡∏°. ${routeData.estimatedTime.minutes} ‡∏ô‡∏≤‡∏ó‡∏µ
üöó ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: ${this.getTravelModeText()}

üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°:
${students.map((student, index) => `${index + 1}. ${student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•']} (${student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']})`).join('\n')}

üåê Google Maps: ${routeData.googleMapsUrl}`;
    
    // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    this.copyToClipboard(shareText);
},

// Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î Preview Modal
cleanupPreviewModal() {
    console.log('üßπ Cleaning up route preview modal');
    
    // ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if (this.leafletMap) {
        this.leafletMap.remove();
        this.leafletMap = null;
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preview
    this.currentPreviewData = null;
    
    // ‡∏•‡∏ö modal element
    setTimeout(() => {
        this.removeExistingPreviewModal();
    }, 100);
},
// ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
renderStatCard(icon, label, value) {
    return `
        <div class="col-6 col-md-3">
            <div class="bg-white rounded p-3 shadow-sm h-100">
                <div class="fs-2 mb-1">${icon}</div>
                <div class="fw-bold fs-5">${value}</div>
                <div class="text-muted small">${label}</div>
            </div>
        </div>
    `;
},

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Timeline HTML
generateRouteTimelineHTML(students, routeData) {
    return students.map((student, index) => {
        const time = `${15 + Math.floor(index * 0.7)}:${(index * 42) % 60}`.padStart(5, '0');
        return `
            <div class="d-flex align-items-start mb-3">
                <div class="me-3 text-primary">${index + 1}</div>
                <div>
                    <div class="fw-semibold">${student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                    <small class="text-muted">‚è∞ ${time} ‡∏ô. ‚Ä¢ ${student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || ''} ‚Ä¢ ${student.distanceFromSchool?.toFixed(1) || '?'} ‡∏Å‡∏°.</small>
                </div>
            </div>
        `;
    }).join('');
},

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô HTML
generateStudentDetailsHTML(students) {
    return students.map((student, i) => {
        const income = this.formatIncome(student['‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ']);
        const visited = student['‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] === '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß';
        const priority = this.calculatePriorityScore(student);
        return `
            <div class="border-start border-4 ps-3 mb-3 ${visited ? 'border-success' : 'border-danger'}">
                <div class="fw-bold">${i + 1}. ${student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '-'}</div>
                <small class="text-muted d-block">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || '-'} | ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${income} | ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${student.distanceFromSchool?.toFixed(1) || '?'} ‡∏Å‡∏°.</small>
                <small class="badge bg-${priority >= 6 ? 'danger' : priority >= 4 ? 'warning' : 'success'} mt-1">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${priority}</small>
            </div>
        `;
    }).join('');
},

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
formatIncome(income) {
    if (!income) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const numIncome = parseFloat(income.toString().replace(/[‡∏ø,]/g, ''));
    if (isNaN(numIncome)) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    return '‡∏ø' + numIncome.toLocaleString();
},

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generateEmbedMapUrl ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Interactive
generateEmbedMapUrl() {
    // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ iframe ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ return empty string
    return '';
},

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Interactive ‡∏î‡πâ‡∏ß‡∏¢ Leaflet
generateInteractiveMapHTML() {
    return `
        <div id="interactiveMapContainer" style="height: 400px; width: 100%; border-radius: 8px; overflow: hidden; border: 1px solid #dee2e6;">
            <div id="leafletMap" style="height: 100%; width: 100%;"></div>
            
            <!-- Loading indicator -->
            <div id="mapLoadingIndicator" class="position-absolute top-50 start-50 translate-middle" style="z-index: 1000;">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status"></div>
                    <div class="mt-2 small text-muted">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà...</div>
                </div>
            </div>
        </div>
        
        <!-- ‡πÇ‡∏´‡∏•‡∏î Leaflet CSS ‡πÅ‡∏•‡∏∞ JS -->
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    `;
},

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
initializeMap(studentMarkers, schoolCoords) {
    console.log('üó∫Ô∏è Starting map initialization...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Leaflet ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const initializeLeafletMap = () => {
        try {
            if (typeof L === 'undefined') {
                console.warn('‚ö†Ô∏è Leaflet not loaded yet, retrying...');
                setTimeout(initializeLeafletMap, 100);
                return;
            }
            
            // ‡∏ã‡πà‡∏≠‡∏ô loading indicator
            const loadingEl = document.getElementById('mapLoadingIndicator');
            if (loadingEl) loadingEl.style.display = 'none';
            
            // ‡πÉ‡∏ä‡πâ currentPreviewData ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            const previewData = this.currentPreviewData;
            if (!previewData || !previewData.students) {
                console.error('‚ùå No preview data available for map');
                this.showMapError('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà');
                return;
            }
            
            const schoolCoords = [14.222052, 99.472970];
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            if (LeafletMapManager.initializeMap('leafletMap', schoolCoords)) {
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° markers ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                LeafletMapManager.addStudentMarkers(previewData.students);
                
                // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
                LeafletMapManager.drawRoute(previewData.students);
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
                LeafletMapManager.addCustomControls();
                
                // ‡πÄ‡∏Å‡πá‡∏ö reference
                this.leafletMap = LeafletMapManager.map;
                
                console.log('‚úÖ Map initialized successfully with', previewData.students.length, 'students');
                
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
                if (typeof this.onMapReady === 'function') {
                    this.onMapReady();
                }
            } else {
                this.showMapError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ');
            }
            
        } catch (error) {
            console.error('‚ùå Map initialization error:', error);
            this.showMapError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà');
        }
    };
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
    setTimeout(initializeLeafletMap, 200);
},
  
  
  
// ============================================================================
// 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Error
// ============================================================================
showMapError(message) {
    const mapContainer = document.getElementById('leafletMap');
    if (mapContainer) {
        mapContainer.innerHTML = `
            <div class="d-flex align-items-center justify-content-center h-100 text-muted bg-light">
                <div class="text-center p-4">
                    <i class="fas fa-exclamation-triangle fs-1 mb-3 text-warning"></i>
                    <h6 class="mb-2">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ</h6>
                    <p class="small mb-3">${message}</p>
                    <button class="btn btn-sm btn-outline-primary" onclick="RoutePlanningGoogle.retryMapLoad()">
                        <i class="fas fa-redo"></i> ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                    </button>
                </div>
            </div>
        `;
    }
    
    // ‡∏ã‡πà‡∏≠‡∏ô loading indicator
    const loadingEl = document.getElementById('mapLoadingIndicator');
    if (loadingEl) loadingEl.style.display = 'none';
},

// ============================================================================
// 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Retry
// ============================================================================
retryMapLoad() {
    console.log('üîÑ Retrying map load...');
    
    // ‡πÅ‡∏™‡∏î‡∏á loading indicator ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const mapContainer = document.getElementById('leafletMap');
    if (mapContainer) {
        mapContainer.innerHTML = '';
    }
    
    const loadingEl = document.getElementById('mapLoadingIndicator');
    if (loadingEl) loadingEl.style.display = 'block';
    
    // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
    setTimeout(() => {
        this.initializeMap();
    }, 500);
},


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
centerMap() {
    if (this.leafletMap) {
        const schoolCoords = [14.222052, 99.472970];
        this.leafletMap.setView(schoolCoords, 12);
        this.showToast('‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'info');
    } else {
        console.warn('‚ö†Ô∏è Map not initialized yet');
        this.showToast('‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'warning');
    }
},

toggleMapView() {
    const mapContainer = document.getElementById('interactiveMapContainer');
    if (!mapContainer) {
        console.warn('‚ö†Ô∏è Map container not found');
        return;
    }
    
    if (mapContainer.style.position === 'fixed') {
        // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        mapContainer.style.position = 'relative';
        mapContainer.style.top = 'auto';
        mapContainer.style.left = 'auto';
        mapContainer.style.width = '100%';
        mapContainer.style.height = '400px';
        mapContainer.style.zIndex = 'auto';
        mapContainer.style.backgroundColor = 'transparent';
        
        console.log('üì± Map returned to normal view');
    } else {
        // ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        mapContainer.style.position = 'fixed';
        mapContainer.style.top = '0';
        mapContainer.style.left = '0';
        mapContainer.style.width = '100vw';
        mapContainer.style.height = '100vh';
        mapContainer.style.zIndex = '9999';
        mapContainer.style.backgroundColor = 'white';
        
        console.log('üîç Map switched to fullscreen');
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
    setTimeout(() => {
        if (this.leafletMap) {
            this.leafletMap.invalidateSize();
            console.log('üîÑ Map size refreshed');
        }
    }, 100);
},

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
backToRoutePlanning() {
    console.log('üîô Back to route planning - preserving selections:', this.tempSelections);
    
    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å preview
    this.fromPreviewBack = true;
    
    // ‡∏õ‡∏¥‡∏î preview modal
    const previewModal = bootstrap.Modal.getInstance(document.getElementById('routePreviewModal'));
    if (previewModal) {
        previewModal.hide();
    }
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ modal ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° restore
    const previewModalElement = document.getElementById('routePreviewModal');
    previewModalElement.addEventListener('hidden.bs.modal', () => {
        setTimeout(() => {
            this.showRoutePlanningModal(); // ‡∏à‡∏∞ restore ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô showRoutePlanningModal
        }, 200);
    }, { once: true });
},

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏õ‡∏¥‡∏î Google Maps" ‡∏à‡∏≤‡∏Å Preview
generateGoogleRouteFromPreview() {
    if (this.currentPreviewData && this.currentPreviewData.students) {
        const googleMapsUrl = this.currentPreviewData.routeData.googleMapsUrl;
        
        // ‡πÄ‡∏õ‡∏¥‡∏î Google Maps
        window.open(googleMapsUrl, '_blank');
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        this.optimizedRoute = this.currentPreviewData.students;
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        this.showToast(`‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${this.currentPreviewData.students.length} ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, 'success');
        
        // ‡∏õ‡∏¥‡∏î preview modal
        const previewModal = bootstrap.Modal.getInstance(document.getElementById('routePreviewModal'));
        if (previewModal) {
            previewModal.hide();
        }
        
        console.log('üó∫Ô∏è Google Maps route generated from preview for', this.currentPreviewData.students.length, 'students');
    }
},

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
printRoutePreview() {
    if (this.currentPreviewData) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå
        const printWindow = window.open('', '_blank', 'width=800,height=600');
        
        if (!printWindow) {
            this.showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï popup', 'error');
            return;
        }
        
        const printContent = this.generatePrintContent(this.currentPreviewData.students, this.currentPreviewData.routeData);
        
        printWindow.document.open();
        printWindow.document.write(printContent);
        printWindow.document.close();
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå
        printWindow.onload = function() {
            printWindow.focus();
            printWindow.print();
        };
        
        console.log('üñ®Ô∏è Print preview generated');
    }
},

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå
generatePrintContent(students, routeData) {
    const currentDate = new Date().toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        weekday: 'long'
    });
    
    return `
        <!DOCTYPE html>
        <html lang="th">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
            <style>
                body { font-family: 'Sarabun', sans-serif; font-size: 14px; }
                .header { background: #1a73e8; color: white; padding: 20px; text-align: center; }
                .summary-box { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; }
                .timeline-item { border-left: 3px solid #28a745; padding-left: 15px; margin-bottom: 15px; }
                .student-card { border: 1px solid #dee2e6; border-radius: 6px; padding: 10px; margin-bottom: 10px; }
                @media print {
                    .no-print { display: none !important; }
                    body { font-size: 12px; }
                    .page-break { page-break-before: always; }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h2><i class="fas fa-route"></i> ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
                <p>${currentDate}</p>
            </div>
            
            <div class="container mt-4">
                <!-- ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
                <div class="summary-box">
                    <h4>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á</h4>
                    <div class="row">
                        <div class="col-3 text-center">
                            <h3 class="text-primary">${students.length}</h3>
                            <small>‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô</small>
                        </div>
                        <div class="col-3 text-center">
                            <h3 class="text-success">${routeData.totalDistance.toFixed(1)}</h3>
                            <small>‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£</small>
                        </div>
                        <div class="col-3 text-center">
                            <h3 class="text-warning">${routeData.estimatedTime.hours}:${String(routeData.estimatedTime.minutes).padStart(2, '0')}</h3>
                            <small>‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</small>
                        </div>
                        <div class="col-3 text-center">
                            <h3 class="text-info">${this.getTravelModeText()}</h3>
                            <small>‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</small>
                        </div>
                    </div>
                </div>
                
                <!-- ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° -->
                <div class="row">
                    <div class="col-md-6">
                        <h4><i class="fas fa-list-ol"></i> ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</h4>
                        ${this.generatePrintTimelineHTML(students, routeData)}
                    </div>
                    
                    <div class="col-md-6">
                        <h4><i class="fas fa-users"></i> ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h4>
                        ${this.generatePrintStudentDetailsHTML(students)}
                    </div>
                </div>
                
                <!-- ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ -->
                <div class="mt-4 p-3 bg-light border-radius">
                    <h5><i class="fas fa-sticky-note"></i> ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h5>
                    <ul>
                        <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</li>
                        <li>‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡∏™‡∏°‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å, ‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤, ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°</li>
                        <li>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 1-2 ‡∏ß‡∏±‡∏ô</li>
                        <li>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</li>
                    </ul>
                </div>
                
                <div class="text-center mt-4">
                    <small class="text-muted">‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}</small>
                </div>
            </div>
            
            <script>
                window.onload = function() {
                    window.print();
                }
            </script>
        </body>
        </html>
    `;
},

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Timeline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå
generatePrintTimelineHTML(students, routeData) {
    const startTime = new Date();
    startTime.setHours(15, 0, 0, 0);
    
    let currentTime = new Date(startTime);
    let timelineHTML = '';
    
    // ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    timelineHTML += `
        <div class="timeline-item">
            <strong>${currentTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}</strong>
            - <i class="fas fa-school"></i> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        </div>
    `;
    
    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏£‡∏Å
    if (students.length > 0) {
        const firstStudent = students[0];
        const travelTimeToFirst = Math.round((firstStudent.distanceFromSchool || 0) * 2);
        currentTime.setMinutes(currentTime.getMinutes() + travelTimeToFirst);
    }
    
    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
    students.forEach((student, index) => {
        const visitDuration = 30;
        const endVisitTime = new Date(currentTime);
        endVisitTime.setMinutes(endVisitTime.getMinutes() + visitDuration);
        
        timelineHTML += `
            <div class="timeline-item">
                <strong>${currentTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })} - 
                ${endVisitTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}</strong><br>
                <i class="fas fa-home"></i> ${student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•']} (${student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']})<br>
                <small>‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${student.distanceFromSchool ? student.distanceFromSchool.toFixed(1) + ' ‡∏Å‡∏°.' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</small>
            </div>
        `;
        
        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        currentTime = new Date(endVisitTime);
        if (index < students.length - 1) {
            const nextStudent = students[index + 1];
            const travelTime = Math.round(this.calculateDistanceBetweenStudents(student, nextStudent) * 3) + 5;
            currentTime.setMinutes(currentTime.getMinutes() + travelTime);
        }
    });
    
    // ‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    if (students.length > 0) {
        const lastStudent = students[students.length - 1];
        const returnTime = Math.round((lastStudent.distanceFromSchool || 0) * 2);
        currentTime.setMinutes(currentTime.getMinutes() + returnTime);
        
        timelineHTML += `
            <div class="timeline-item">
                <strong>${currentTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}</strong>
                - <i class="fas fa-school"></i> ‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </div>
        `;
    }
    
    return timelineHTML;
},

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå
generatePrintStudentDetailsHTML(students) {
    return students.map((student, index) => {
        const isVisited = student['‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] === '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß';
        const priorityScore = this.calculatePriorityScore(student);
        
        return `
            <div class="student-card">
                <strong>${index + 1}. ${student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•']}</strong><br>
                <small>
                    ‡∏´‡πâ‡∏≠‡∏á: ${student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']} | 
                    ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${this.formatIncome(student['‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'])} | 
                    ${isVisited ? '‚úÖ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'}<br>
                    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${priorityScore >= 6 ? '‡∏™‡∏π‡∏á' : priorityScore >= 4 ? '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : '‡∏ï‡πà‡∏≥'} (${priorityScore})
                </small>
            </div>
        `;
    }).join('');
},

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Waypoints ‡πÉ‡∏ô Embed Map
getWaypointsForEmbed() {
    if (this.currentPreviewData && this.currentPreviewData.students) {
        return this.currentPreviewData.students
            .map(student => {
                const coords = student['LatLongHome'];
                if (coords && coords.includes(',')) {
                    // ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô URL
                    return encodeURIComponent(coords.trim());
                }
                return null;
            })
            .filter(coord => coord !== null)
            .join('|'); // ‡∏Ñ‡∏±‡πà‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ | ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Maps Embed API
    }
    return '';
},

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô init ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏î‡∏¥‡∏°
init() {
    if (this.isInitialized) return;
    console.log('üöó Initializing Route Planning with Google Maps...');
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    if (typeof map === 'undefined' || typeof homeVisitData === 'undefined') {
        setTimeout(() => this.init(), 1000);
        return;
    }
    
    this.createRouteButton();
    this.setupModalCleanup(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ setup cleanup
    this.isInitialized = true;
    console.log('‚úÖ Route Planning with Google Maps loaded successfully');
},

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ cleanup modal
setupModalCleanup() {
    // ‡∏ü‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏û‡∏∑‡πà‡∏≠ cleanup
    document.addEventListener('hidden.bs.modal', (event) => {
        const modalId = event.target.id;
        
        if (modalId === 'routePlanningGoogleModal') {
            this.cleanupMainModal();
        } else if (modalId === 'routePreviewModal') {
            this.cleanupPreviewModal();
        }
    });
},

// Cleanup Main Modal
cleanupMainModal() {
    console.log('üßπ Cleaning up main route planning modal');
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    // this.clearSelection();
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    this.tempSelections = null;
  
},

// Cleanup Preview Modal
cleanupPreviewModal() {
    console.log('üßπ Cleaning up route preview modal');
    
    // ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if (this.leafletMap) {
        try {
            this.leafletMap.remove();
            console.log('üóëÔ∏è Leaflet map removed');
        } catch (error) {
            console.warn('‚ö†Ô∏è Error removing map:', error);
        }
        this.leafletMap = null;
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á LeafletMapManager
    if (typeof LeafletMapManager !== 'undefined') {
        LeafletMapManager.destroy();
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preview
    this.currentPreviewData = null;
    
    // ‡∏•‡∏ö modal element
    setTimeout(() => {
        this.removeExistingPreviewModal();
    }, 100);
},
  
  openGoogleMapsFromPreview() {
    if (this.currentPreviewData && this.currentPreviewData.routeData) {
        const googleMapsUrl = this.currentPreviewData.routeData.googleMapsUrl;
        window.open(googleMapsUrl, '_blank');
        this.showToast('‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡πÅ‡∏•‡πâ‡∏ß', 'success');
    } else {
        this.showToast('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Google Maps', 'warning');
    }
},
  
  
  ///////////////////////////////////////
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á Google Maps
    generateGoogleRoute() {
        const selectedStudents = this.getSelectedStudents();
        const maxVisits = parseInt(document.getElementById('googleMaxVisits').value);
        
        if (selectedStudents.length === 0) {
            this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏Å‡πà‡∏≠‡∏ô', 'warning');
            return;
        }
        
        if (selectedStudents.length > maxVisits) {
            this.showToast(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${maxVisits} ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ ${selectedStudents.length} ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô)`, 'error');
            return;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Google Maps
        const googleMapsUrl = this.generateGoogleMapsUrl(selectedStudents);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        this.optimizedRoute = selectedStudents;
        
        // ‡πÄ‡∏õ‡∏¥‡∏î Google Maps
        window.open(googleMapsUrl, '_blank');
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        this.showToast(`‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${selectedStudents.length} ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, 'success');
        
        // ‡∏õ‡∏¥‡∏î modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('routePlanningGoogleModal'));
        if (modal) modal.hide();
        
        console.log('üó∫Ô∏è Google Maps route generated for', selectedStudents.length, 'students');
    },
    
    // ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    getSelectedStudents() {
        const selectedStudents = [];
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ checkbox ‡∏ó‡∏µ‡πà checked ‡πÅ‡∏•‡∏∞ parent element ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà
        document.querySelectorAll('.google-student-checkbox:checked').forEach(checkbox => {
            const parentItem = checkbox.closest('.google-student-item');
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ item ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
            if (parentItem && parentItem.style.display !== 'none') {
                const studentIndex = parseInt(checkbox.value);
                const student = homeVisitData[studentIndex];
                if (student && student['LatLongHome']) {
                    selectedStudents.push({
                        ...student,
                        originalIndex: studentIndex
                    });
                }
            }
        });
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        return this.sortSelectedStudents(selectedStudents);
    },
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    sortSelectedStudents(students) {
        const sortBy = document.getElementById('googleSortBy').value;
        
        return students.sort((a, b) => {
            switch (sortBy) {
                case 'distance':
                    return (a.distanceFromSchool || 999) - (b.distanceFromSchool || 999);
                case 'priority':
                    return this.calculatePriorityScore(b) - this.calculatePriorityScore(a);
                case 'class':
                    return (a['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || '').localeCompare(b['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'] || '');
                case 'name':
                    return (a['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '').localeCompare(b['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || '');
                default:
                    return 0;
            }
        });
    },
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Maps
    generateGoogleMapsUrl(students, preview = false) {
        // ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
        const schoolCoords = '14.222052,99.472970';
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏∏‡∏î
        const waypoints = students.map(student => {
            const coords = student['LatLongHome'].replace(/\s+/g, '');
            return coords;
        }).join('|');
        
        // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
        const travelMode = document.getElementById('googleTravelMode').value;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL
        let url = 'https://www.google.com/maps/dir/';
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        url += `${schoolCoords}/`;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏∏‡∏î
        students.forEach(student => {
            const coords = student['LatLongHome'].replace(/\s+/g, '');
            url += `${coords}/`;
        });
        
        // ‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        url += `${schoolCoords}/`;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        url += `?hl=th&dirflg=${this.getTravelModeCode(travelMode)}`;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if (!preview) {
            url += '&travelmode=' + travelMode;
            url += '&units=metric';
        }
        
        return url;
    },
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
    getTravelModeCode(mode) {
        const modes = {
            'driving': 'd',
            'walking': 'w',
            'bicycling': 'b',
            'transit': 'r'
        };
        return modes[mode] || 'd';
    },
    
    // ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
    getTravelModeText() {
        const mode = document.getElementById('googleTravelMode').value;
        const modes = {
            'driving': 'üöó ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ',
            'walking': 'üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏ó‡πâ‡∏≤',
            'bicycling': 'üö¥ ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô',
            'transit': 'üöå ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'
        };
        return modes[mode] || '‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ';
    },
    
    // ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    getSortByText() {
        const sortBy = document.getElementById('googleSortBy').value;
        const sorts = {
            'distance': '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î',
            'priority': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
            'class': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
            'name': '‡∏ä‡∏∑‡πà‡∏≠ A-Z'
        };
        return sorts[sortBy] || '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î';
    },
    
    // ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    shareRoute() {
        const selectedStudents = this.getSelectedStudents();
        if (selectedStudents.length === 0) {
            this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏Å‡πà‡∏≠‡∏ô', 'warning');
            return;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏£‡πå
        const routeText = this.generateShareText(selectedStudents);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ LINE LIFF ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (typeof liff !== 'undefined' && liff.isLoggedIn()) {
            // ‡πÅ‡∏ä‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô LINE
            this.shareViaLine(routeText, selectedStudents);
        } else {
            // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            this.copyToClipboard(routeText);
        }
    },
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏£‡πå
    generateShareText(students) {
        const totalDistance = students.reduce((sum, student) => {
            return sum + (student.distanceFromSchool || 0);
        }, 0);
        
        const estimatedTime = students.length * 30 + totalDistance * 3;
        
        let text = `üìç ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n`;
        text += `üïê ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleDateString('th-TH')}\n`;
        text += `üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${students.length} ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô\n`;
        text += `üöó ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${this.getTravelModeText()}\n`;
        text += `üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${totalDistance.toFixed(1)} ‡∏Å‡∏°. (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)\n`;
        text += `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: ${Math.round(estimatedTime)} ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)\n\n`;
        
        text += `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°:\n`;
        students.forEach((student, index) => {
            text += `${index + 1}. ${student['‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•']} (${student['‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']})\n`;
        });
        
        text += `\nüó∫Ô∏è Google Maps: ${this.generateGoogleMapsUrl(students)}`;
        
        return text;
    },
    
    // ‡πÅ‡∏ä‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô LINE
    shareViaLine(text, students) {
        if (typeof liff === 'undefined') {
            this.copyToClipboard(text);
            return;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
        const flexMessage = {
            type: "flex",
            altText: "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
            contents: {
                type: "bubble",
                size: "giga",
                header: {
                    type: "box",
                    layout: "vertical",
                    contents: [
                        {
                            type: "text",
                            text: "üìç ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
                            weight: "bold",
                            size: "lg",
                            color: "#ffffff"
                        },
                        {
                            type: "text",
                            text: new Date().toLocaleDateString('th-TH'),
                            size: "sm",
                            color: "#ffffff",
                            margin: "sm"
                        }
                    ],
                    backgroundColor: "#28a745",
                    paddingAll: "20px"
                },
                body: {
                    type: "box",
                    layout: "vertical",
                    contents: [
                        {
                            type: "box",
                            layout: "baseline",
                            contents: [
                                { type: "text", text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:", flex: 2, size: "sm", color: "#aaaaaa" },
                                { type: "text", text: `${students.length} ‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô`, flex: 3, size: "sm", weight: "bold" }
                            ]
                        },
                        {
                            type: "box",
                            layout: "baseline",
                            contents: [
                                { type: "text", text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:", flex: 2, size: "sm", color: "#aaaaaa" },
                                { type: "text", text: this.getTravelModeText(), flex: 3, size: "sm" }
                            ],
                            margin: "sm"
                        }
                    ]
                },
                footer: {
                    type: "box",
                    layout: "vertical",
                    contents: [
                        {
                            type: "button",
                            style: "primary",
                            height: "sm",
                            action: {
                                type: "uri",
                                label: "üó∫Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î Google Maps",
                                uri: this.generateGoogleMapsUrl(students)
                            },
                            color: "#4285f4"
                        }
                    ]
                }
            }
        };
        
        liff.shareTargetPicker([flexMessage])
            .then(() => {
                this.showToast('‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            })
            .catch(error => {
                console.error('Error sharing:', error);
                this.copyToClipboard(text);
            });
    },
    
    // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    copyToClipboard(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(() => {
                this.showToast('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'success');
            }).catch(() => {
                this.fallbackCopyTextToClipboard(text);
            });
        } else {
            this.fallbackCopyTextToClipboard(text);
        }
    },
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á
    fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.showToast('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'success');
        } catch (err) {
            this.showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á', 'error');
        }
        
        document.body.removeChild(textArea);
    },
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Toast
    showToast(message, type = 'info') {
        const toastId = 'googleRouteToast_' + Date.now();
        const bgClass = {
            'success': 'bg-success',
            'error': 'bg-danger',
            'warning': 'bg-warning',
            'info': 'bg-info'
        }[type] || 'bg-info';
        
        const icon = {
            'success': 'fas fa-check-circle',
            'error': 'fas fa-exclamation-circle',
            'warning': 'fas fa-exclamation-triangle',
            'info': 'fas fa-info-circle'
        }[type] || 'fas fa-info-circle';
        
        const toastHTML = `
            <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
                <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header ${bgClass} text-white">
                        <i class="${icon} me-2"></i>
                        <strong class="me-auto">Google Maps Route</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            </div>
        `;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° toast
        document.body.insertAdjacentHTML('beforeend', toastHTML);
        
        // ‡πÅ‡∏™‡∏î‡∏á toast
        const toast = new bootstrap.Toast(document.getElementById(toastId), {
            autohide: true,
            delay: type === 'error' ? 5000 : 3000
        });
        toast.show();
        
        // ‡∏•‡∏ö toast ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î
        document.getElementById(toastId).addEventListener('hidden.bs.toast', function() {
            this.parentNode.remove();
        });
    }
};

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', function() {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    setTimeout(() => {
        RoutePlanningGoogle.init();
    }, 1500);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
document.addEventListener('dataLoaded', function() {
    if (RoutePlanningGoogle.isInitialized) {
        console.log('üîÑ Google route planning data updated');
    }
});

// Enhanced Leaflet Map Integration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô
// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å code ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

const LeafletMapManager = {
    map: null,
    markers: [],
    routeLine: null,
    schoolMarker: null,
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
initializeMap(containerId, schoolCoords = [14.222052, 99.472970]) {
        try {
            console.log('üó∫Ô∏è Initializing Leaflet map in container:', containerId);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ container ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            const container = document.getElementById(containerId);
            if (!container) {
                console.error('‚ùå Map container not found:', containerId);
                return false;
            }
            
            // ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if (this.map) {
                console.log('üóëÔ∏è Removing existing map');
                this.map.remove();
                this.map = null;
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Leaflet ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
            if (typeof L === 'undefined') {
                console.error('‚ùå Leaflet library not loaded');
                return false;
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
            this.map = L.map(containerId, {
                center: schoolCoords,
                zoom: 12,
                zoomControl: true,
                attributionControl: true,
                maxZoom: 18,
                minZoom: 8
            });
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° tile layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                maxZoom: 18,
                minZoom: 8
            }).addTo(this.map);
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° marker ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            this.addSchoolMarker(schoolCoords);
            
            console.log('‚úÖ Leaflet map initialized successfully');
            return true;
            
        } catch (error) {
            console.error('‚ùå Map initialization failed:', error);
            return false;
        }
    },
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    isMapReady() {
        return this.map !== null && typeof L !== 'undefined';
    },
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô retry
    retryInitialization(containerId, schoolCoords, maxRetries = 3) {
        let attempts = 0;
        
        const tryInit = () => {
            attempts++;
            console.log(`üîÑ Map initialization attempt ${attempts}/${maxRetries}`);
            
            if (this.initializeMap(containerId, schoolCoords)) {
                return true;
            }
            
            if (attempts < maxRetries) {
                setTimeout(tryInit, 1000 * attempts); // ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            } else {
                console.error('‚ùå Map initialization failed after', maxRetries, 'attempts');
                return false;
            }
        };
        
        return tryInit();
    }
};

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà LeafletMapManager ‡πÄ‡∏î‡∏¥‡∏°
window.LeafletMapManager = LeafletMapManagerFixed;

// ============================================================================
// 10. ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Loading ‡πÅ‡∏•‡∏∞ Error States
// ============================================================================
const additionalStyles = `
<style>
/* Map loading states */
#mapLoadingIndicator {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

/* Map error states */
.map-error-container {
    background: #f8f9fa;
    border: 1px dashed #dee2e6;
    border-radius: 8px;
}

/* Map fullscreen improvements */
#interactiveMapContainer[style*="position: fixed"] {
    background: white !important;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
}

/* Leaflet popup improvements */
.leaflet-popup-content {
    font-family: inherit;
    line-height: 1.4;
}

.leaflet-popup-content-wrapper {
    border-radius: 8px;
}

/* Control buttons */
.leaflet-control-container .leaflet-control {
    margin: 5px;
    border-radius: 6px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.2);
}

.leaflet-control-container .leaflet-control a {
    transition: all 0.2s ease;
}

.leaflet-control-container .leaflet-control a:hover {
    background: #007bff !important;
    color: white !important;
}

/* Responsive improvements */
@media (max-width: 768px) {
    #interactiveMapContainer {
        height: 300px !important;
    }
    
    .leaflet-control-container {
        font-size: 14px;
    }
}
</style>
`;

// ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS
document.head.insertAdjacentHTML('beforeend', additionalStyles);

console.log('üîß Leaflet map fixes applied successfully');